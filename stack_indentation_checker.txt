package stack_indentation_checker;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Stack;

class BadIndentationException extends RuntimeException
{
 /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

BadIndentationException(String error)
 {
 super(error);
 }
}

public class Indent_checker {
 Stack<Integer> indentStack = new Stack<Integer>();

 private int findFirstNonBlank(String line)
 {
	char[] characters = line.toCharArray();
	
	 for(int i=0; i<=line.length()-1; i++) {
		 if(!(Character.isWhitespace(characters[i]))) {
			 return i;
		 }
	 }
	 return -1;
	 // return index of first non-blank character
 // return -1 if the line doesn't contain a nonblank character
 }

 private void processLine(String line, int lineNumber)
 {
	 int index = findFirstNonBlank(line);
	 // Skip blank lines ... i.e. return immediately
	 if (line.equals(null)) {
		 return;
	 }
 // If the stack is empty, then push this index onto the stack and return
 	if (indentStack.isEmpty()){
	 indentStack.push(index);
	 return;
 	}
 // If this index > than the top of the stack, then push this index onto the stack and return
 	if(index>indentStack.peek()) {
 		indentStack.push(index);
 		return;
 	}
 	 // Pop off all Indentation indexes > index
 	for(int i = 0; i<=indentStack.size()-1; i++) {
 		if(indentStack.get(i)>index) {
 			indentStack.pop();
 		}
 	}
 	//printStackBetter(indentStack);
 	//System.out.println(lineNumber);
 	//System.out.println("index" + index);

 	if (!(indentStack.peek()==index)) {
 		throw new BadIndentationException("Bad indentation at line " + lineNumber);
 		}
 	}
 

 public void checkIndentation(String fileName)
 {
 // Clear the stack
	 indentStack.clear();
	 Scanner input = null;
	 try {
		 input = new Scanner (new File(fileName));
		 int lineNum = 0;
		 	while(input.hasNextLine()) {
		 		String scanned = input.nextLine();
		 		if(scanned.trim().length()==0) {
		 			System.out.println();
		 			lineNum++;
		 		}
		 		else {
		 		System.out.println(scanned);
		 		processLine(scanned,lineNum);
		 		}
		 		lineNum++;
		 // read through the file line by line
		 // for each line, call processLine to check indentation
		 	} 
			 System.out.println(fileName + "must be properly indented.");

		 }
	 
	 catch (BadIndentationException error)
	 {
		 System.out.println(error);
	 }
	 catch (FileNotFoundException e)
	 {
		 System.out.println("Can't open file: "+fileName);
	 }
	 finally
	 {
		 if (input != null)
			 input.close();
		 System.out.println("Closing input");
	 }
 }
 
 
  //small method to print stack contents for debugging
 /*void printStackBetter(Stack<Integer> s){
		if(s.empty()){
			return;
		}
		int item = s.pop();
		System.out.println(item); 
		//printStackBetter(s); 
		s.push(item); 
	}

*/
 
 public static void main(String[] args) {
 Indent_checker indentChecker = new Indent_checker();

 for (int i=0; i < args.length; i++)
 {
 System.out.println("Processing file: " + args[i]);
 indentChecker.checkIndentation(args[i]);
 }
 }
}